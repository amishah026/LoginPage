{"ast":null,"code":"'use strict';\n\nconst Packet = require('../packets/packet');\nconst StringParser = require('../parsers/string');\nconst CharsetToEncoding = require('../constants/charset_encodings.js');\nconst fields = ['catalog', 'schema', 'table', 'orgTable', 'name', 'orgName'];\n\n// creating JS string is relatively expensive (compared to\n// reading few bytes from buffer) because all string properties\n// except for name are unlikely to be used we postpone\n// string conversion until property access\n//\n// TODO: watch for integration benchmarks (one with real network buffer)\n// there could be bad side effect as keeping reference to a buffer makes it\n// sit in the memory longer (usually until final .query() callback)\n// Latest v8 perform much better in regard to bufferer -> string conversion,\n// at some point of time this optimisation might become unnecessary\n// see https://github.com/sidorares/node-mysql2/pull/137\n//\nclass ColumnDefinition {\n  constructor(packet, clientEncoding) {\n    this._buf = packet.buffer;\n    this._clientEncoding = clientEncoding;\n    this._catalogLength = packet.readLengthCodedNumber();\n    this._catalogStart = packet.offset;\n    packet.offset += this._catalogLength;\n    this._schemaLength = packet.readLengthCodedNumber();\n    this._schemaStart = packet.offset;\n    packet.offset += this._schemaLength;\n    this._tableLength = packet.readLengthCodedNumber();\n    this._tableStart = packet.offset;\n    packet.offset += this._tableLength;\n    this._orgTableLength = packet.readLengthCodedNumber();\n    this._orgTableStart = packet.offset;\n    packet.offset += this._orgTableLength;\n    // name is always used, don't make it lazy\n    const _nameLength = packet.readLengthCodedNumber();\n    const _nameStart = packet.offset;\n    packet.offset += _nameLength;\n    this._orgNameLength = packet.readLengthCodedNumber();\n    this._orgNameStart = packet.offset;\n    packet.offset += this._orgNameLength;\n    packet.skip(1); //  length of the following fields (always 0x0c)\n    this.characterSet = packet.readInt16();\n    this.encoding = CharsetToEncoding[this.characterSet];\n    this.name = StringParser.decode(this._buf, this.encoding === 'binary' ? this._clientEncoding : this.encoding, _nameStart, _nameStart + _nameLength);\n    this.columnLength = packet.readInt32();\n    this.columnType = packet.readInt8();\n    this.type = this.columnType;\n    this.flags = packet.readInt16();\n    this.decimals = packet.readInt8();\n  }\n  inspect() {\n    return {\n      catalog: this.catalog,\n      schema: this.schema,\n      name: this.name,\n      orgName: this.orgName,\n      table: this.table,\n      orgTable: this.orgTable,\n      characterSet: this.characterSet,\n      columnLength: this.columnLength,\n      columnType: this.columnType,\n      type: this.columnType,\n      flags: this.flags,\n      decimals: this.decimals\n    };\n  }\n  static toPacket(column, sequenceId) {\n    let length = 17; // = 4 padding + 1 + 12 for the rest\n    fields.forEach(field => {\n      length += Packet.lengthCodedStringLength(column[field], CharsetToEncoding[column.characterSet]);\n    });\n    const buffer = Buffer.allocUnsafe(length);\n    const packet = new Packet(sequenceId, buffer, 0, length);\n    function writeField(name) {\n      packet.writeLengthCodedString(column[name], CharsetToEncoding[column.characterSet]);\n    }\n    packet.offset = 4;\n    fields.forEach(writeField);\n    packet.writeInt8(0x0c);\n    packet.writeInt16(column.characterSet);\n    packet.writeInt32(column.columnLength);\n    packet.writeInt8(column.columnType);\n    packet.writeInt16(column.flags);\n    packet.writeInt8(column.decimals);\n    packet.writeInt16(0); // filler\n    return packet;\n  }\n\n  // node-mysql compatibility: alias \"db\" to \"schema\"\n  get db() {\n    return this.schema;\n  }\n}\nconst addString = function (name) {\n  Object.defineProperty(ColumnDefinition.prototype, name, {\n    get: function () {\n      const start = this[`_${name}Start`];\n      const end = start + this[`_${name}Length`];\n      const val = StringParser.decode(this._buf, this.encoding === 'binary' ? this._clientEncoding : this.encoding, start, end);\n      Object.defineProperty(this, name, {\n        value: val,\n        writable: false,\n        configurable: false,\n        enumerable: false\n      });\n      return val;\n    }\n  });\n};\naddString('catalog');\naddString('schema');\naddString('table');\naddString('orgTable');\naddString('orgName');\nmodule.exports = ColumnDefinition;","map":{"version":3,"names":["Packet","require","StringParser","CharsetToEncoding","fields","ColumnDefinition","constructor","packet","clientEncoding","_buf","buffer","_clientEncoding","_catalogLength","readLengthCodedNumber","_catalogStart","offset","_schemaLength","_schemaStart","_tableLength","_tableStart","_orgTableLength","_orgTableStart","_nameLength","_nameStart","_orgNameLength","_orgNameStart","skip","characterSet","readInt16","encoding","name","decode","columnLength","readInt32","columnType","readInt8","type","flags","decimals","inspect","catalog","schema","orgName","table","orgTable","toPacket","column","sequenceId","length","forEach","field","lengthCodedStringLength","Buffer","allocUnsafe","writeField","writeLengthCodedString","writeInt8","writeInt16","writeInt32","db","addString","Object","defineProperty","prototype","get","start","end","val","value","writable","configurable","enumerable","module","exports"],"sources":["C:/Users/User/Desktop/frontend/LoginApp/node_modules/mysql2/lib/packets/column_definition.js"],"sourcesContent":["'use strict';\n\nconst Packet = require('../packets/packet');\nconst StringParser = require('../parsers/string');\nconst CharsetToEncoding = require('../constants/charset_encodings.js');\n\nconst fields = ['catalog', 'schema', 'table', 'orgTable', 'name', 'orgName'];\n\n// creating JS string is relatively expensive (compared to\n// reading few bytes from buffer) because all string properties\n// except for name are unlikely to be used we postpone\n// string conversion until property access\n//\n// TODO: watch for integration benchmarks (one with real network buffer)\n// there could be bad side effect as keeping reference to a buffer makes it\n// sit in the memory longer (usually until final .query() callback)\n// Latest v8 perform much better in regard to bufferer -> string conversion,\n// at some point of time this optimisation might become unnecessary\n// see https://github.com/sidorares/node-mysql2/pull/137\n//\nclass ColumnDefinition {\n  constructor(packet, clientEncoding) {\n    this._buf = packet.buffer;\n    this._clientEncoding = clientEncoding;\n    this._catalogLength = packet.readLengthCodedNumber();\n    this._catalogStart = packet.offset;\n    packet.offset += this._catalogLength;\n    this._schemaLength = packet.readLengthCodedNumber();\n    this._schemaStart = packet.offset;\n    packet.offset += this._schemaLength;\n    this._tableLength = packet.readLengthCodedNumber();\n    this._tableStart = packet.offset;\n    packet.offset += this._tableLength;\n    this._orgTableLength = packet.readLengthCodedNumber();\n    this._orgTableStart = packet.offset;\n    packet.offset += this._orgTableLength;\n    // name is always used, don't make it lazy\n    const _nameLength = packet.readLengthCodedNumber();\n    const _nameStart = packet.offset;\n    packet.offset += _nameLength;\n    this._orgNameLength = packet.readLengthCodedNumber();\n    this._orgNameStart = packet.offset;\n    packet.offset += this._orgNameLength;\n    packet.skip(1); //  length of the following fields (always 0x0c)\n    this.characterSet = packet.readInt16();\n    this.encoding = CharsetToEncoding[this.characterSet];\n    this.name = StringParser.decode(\n      this._buf,\n      this.encoding === 'binary' ? this._clientEncoding : this.encoding,\n      _nameStart, \n      _nameStart + _nameLength\n    );\n    this.columnLength = packet.readInt32();\n    this.columnType = packet.readInt8();\n    this.type = this.columnType;\n    this.flags = packet.readInt16();\n    this.decimals = packet.readInt8();\n  }\n\n  inspect() {\n    return {\n      catalog: this.catalog,\n      schema: this.schema,\n      name: this.name,\n      orgName: this.orgName,\n      table: this.table,\n      orgTable: this.orgTable,\n      characterSet: this.characterSet,\n      columnLength: this.columnLength,\n      columnType: this.columnType,\n      type: this.columnType,\n      flags: this.flags,\n      decimals: this.decimals\n    };\n  }\n\n  static toPacket(column, sequenceId) {\n    let length = 17; // = 4 padding + 1 + 12 for the rest\n    fields.forEach(field => {\n      length += Packet.lengthCodedStringLength(\n        column[field],\n        CharsetToEncoding[column.characterSet]\n      );\n    });\n    const buffer = Buffer.allocUnsafe(length);\n\n    const packet = new Packet(sequenceId, buffer, 0, length);\n    function writeField(name) {\n      packet.writeLengthCodedString(\n        column[name],\n        CharsetToEncoding[column.characterSet]\n      );\n    }\n    packet.offset = 4;\n    fields.forEach(writeField);\n    packet.writeInt8(0x0c);\n    packet.writeInt16(column.characterSet);\n    packet.writeInt32(column.columnLength);\n    packet.writeInt8(column.columnType);\n    packet.writeInt16(column.flags);\n    packet.writeInt8(column.decimals);\n    packet.writeInt16(0); // filler\n    return packet;\n  }\n\n  // node-mysql compatibility: alias \"db\" to \"schema\"\n  get db() {\n    return this.schema;\n  }\n}\n\nconst addString = function(name) {\n  Object.defineProperty(ColumnDefinition.prototype, name, {\n    get: function() {\n      const start = this[`_${name}Start`];\n      const end = start + this[`_${name}Length`];\n      const val = StringParser.decode(\n        this._buf,\n        this.encoding === 'binary' ? this._clientEncoding : this.encoding,\n        start, \n        end\n      );\n      \n      Object.defineProperty(this, name, {\n        value: val,\n        writable: false,\n        configurable: false,\n        enumerable: false\n      });\n\n      return val;\n    }\n  });\n};\n\naddString('catalog');\naddString('schema');\naddString('table');\naddString('orgTable');\naddString('orgName');\n\nmodule.exports = ColumnDefinition;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}